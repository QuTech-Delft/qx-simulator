name: Test

on:
  push:
    branches:
      - develop
  pull_request:

jobs:
  cpp-linux:
    name: "C++ tests on Linux"
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        build_type:
          - Debug
          - Release
        compiler:
          - clang++
          - g++
    steps:
      - name: Checkout with submodules
        uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Create build directory
        run: mkdir -p build-${{ matrix.compiler }}-${{ matrix.build_type }}
      - name: Configure
        working-directory: build-${{ matrix.compiler }}-${{ matrix.build_type }}
        env:
          CXX: ${{ matrix.compiler }}
        run: cmake -S .. -B . -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DQX_BUILD_TESTS=ON
      - name: Build
        working-directory: build-${{ matrix.compiler }}-${{ matrix.build_type }}
        env:
          CXX: ${{ matrix.compiler }}
        run: cmake --build . --parallel 10
      - name: Test
        working-directory: build-${{ matrix.compiler }}-${{ matrix.build_type }}
        run: ctest --output-on-failure

  cpp-linux-arm64:
    name: "C++ tests on Linux"
    runs-on:
      - "self-hosted"
      - "ARM64"
      - "Linux"
    strategy:
      fail-fast: false
      matrix:
        build_type:
          - Debug
          - Release
        compiler:
          - clang++
          - g++
    steps:
      - name: Checkout with submodules
        uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Create build directory
        run: mkdir -p build-${{ matrix.compiler }}-${{ matrix.build_type }}
      - name: Configure
        working-directory: build-${{ matrix.compiler }}-${{ matrix.build_type }}
        env:
          CXX: ${{ matrix.compiler }}
        run: cmake -S .. -B . -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DQX_BUILD_TESTS=ON
      - name: Build
        working-directory: build-${{ matrix.compiler }}-${{ matrix.build_type }}
        env:
          CXX: ${{ matrix.compiler }}
        run: cmake --build . --parallel 10
      - name: Test
        working-directory: build-${{ matrix.compiler }}-${{ matrix.build_type }}
        run: ctest --output-on-failure

  cpp-macos:
    name: "C++ tests on MacOS with Clang"
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        build_type:
          - Debug
          - Release
    steps:
      - name: Checkout with submodules
        uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Install Bison and Flex
        run: |
          brew install bison flex
          echo "/usr/local/opt/bison/bin" >> $GITHUB_PATH
          echo "/usr/local/opt/flex/bin" >> $GITHUB_PATH
      - name: Create build directory
        run: mkdir -p build-${{ matrix.build_type }}
      - name: Configure
        working-directory: build-${{ matrix.build_type }}
        run: cmake -S .. -B . -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DQX_BUILD_TESTS=ON
      - name: Build
        working-directory: build-${{ matrix.build_type }}
        run: cmake --build . --parallel 10
      - name: Test
        working-directory: build-${{ matrix.build_type }}
        run: ctest --output-on-failure

  cpp-windows:
    name: "C++ tests on Windows"
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        build_type:
          - Debug
          - Release
    steps:
      - name: Checkout with submodules
        uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Install Winflexbison3
        shell: powershell
        run: choco install winflexbison3 --version 2.5.24.20210105
      - name: Create build directory
        run: mkdir -p build-${{ matrix.build_type }}
      - name: Configure
        working-directory: build-${{ matrix.build_type }}
        run: cmake -S .. -B . -DQX_BUILD_TESTS=ON
      - name: Build
        working-directory: build-${{ matrix.build_type }}
        run: cmake --build . --parallel 10 --config ${{ matrix.build_type }}
      - name: Test
        working-directory: build-${{ matrix.build_type }}
        run: ctest -C ${{ matrix.build_type }} --output-on-failure

  python:
    name: Python
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
    steps:
      - name: Checkout with submodules
        uses: actions/checkout@v2
        with:
          submodules: recursive
      - uses: actions/setup-python@v2
        with:
          python-version: "3.11"
      - name: Install Python dependencies
        run: python -m pip install --upgrade pip setuptools wheel pytest
      - name: Install SWIG
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get install -y swig
      - name: Install Bison, Flex and SWIG
        if: matrix.os == 'macos-latest'
        run: |
          brew install bison flex swig
          echo "/usr/local/opt/bison/bin" >> $GITHUB_PATH
          echo "/usr/local/opt/flex/bin" >> $GITHUB_PATH
      - name: Install Winflexbison3
        if: matrix.os == 'windows-latest'
        shell: powershell
        run: choco install winflexbison3 --version 2.5.24.20210105
      - name: Build the Qxelarator module
        env:
          QX_CPU_COMPATIBILITY_MODE: ON
          NPROCS: 10
        run: python -m pip install --verbose .
      - name: Python tests
        working-directory: tests/qxelarator
        run: python -m pytest
